#!/usr/bin/env python3
# GUI to manage movement and action queues
# Copyright (C) 2022 David P. Rideout
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
import tkinter as tk
from tkinter import ttk

class qgui(tk.Tk):
  def __init__(s, act):
    super().__init__()
    s.act = act # name of action (i.e. 'Move' or 'Act')
    s.title(f'{act} Queue')
    s.columnconfigure(0) # name
    s.columnconfigure(1) # button
#     s.update()
#     s.bind('<1>', s.update)
    s.n = 0
    s.w = [] # array of arrays of widgets

  def update(s):
    fp = open('.queue', 'r')
    ri = 0
    for l in fp:
      #if l[0]=='#': continue
#       ls = l.split()
#       if ls[col]=='-': continue
#       self.nums.append(float(ls[col]))
#       ttk.Label(s, text=l[:-1], borderwidth=0, background='pink', anchor=tk.CENTER).grid(column=0, row=r, sticky=tk.EW, ipadx=3, ipady=0)
      wl = ttk.Label(s, text=l[:-1])
      wl.grid(column=0, row=ri, sticky=tk.EW, ipadx=4)
#       s.w[ri][0] = w
      wb = ttk.Button(s, text=s.act)
      wb.grid(column=1, row=ri)
#       s.w[ri][1] = w
      s.w.append([wl,wb])
      ri += 1
    if ri>s.n: s.n=ri
    else:
      while ri<s.n:
#         ttk.Label(s, text='xxxxxxxxxxxxxxxx', sticky=tk.EW).grid(column=0, row=ri, ipadx=4)
#         ttk.Label(s, text='xxxxxx', sticky=tk.EW).grid(column=1, row=ri)
        ttk.Label(s, text='xxxxxxxxxxxxx').grid(column=0, row=ri, ipadx=4)
        ttk.Label(s, text='xxxxxx').grid(column=1, row=ri)
        print('attempting to erase row', ri)
        print(s.grid_slaves())
#         print(s.w[ri][0], s.w[ri][1])
#         s.w[ri][0].grid_forget()
#         s.w[ri][1].grid_forget()
        ri += 1
    fp.close()
    print('ri =', ri, 'n =', s.n)

#   def refresh(s):
#     s.after(

qg = qgui('Move')

# for i in range(10):
#   time.sleep(1)
#   print(i)
#   qg.event_generate('<1>')
i=0
def fn():
  global i
  print(i)
  qg.update()
  i += 1
  qg.after(3000, fn)

fn()
  
qg.mainloop()

# deleted figures are not removed properly.  Fix or just leave them? (27apr022)

